---
// TableOfContents component
interface Props {
	headings?: {depth: number; slug: string; text: string}[];
}

const {headings = []} = Astro.props;
const hasHeadings = headings.length > 0;
---

{
	hasHeadings && (
		<div class='toc-container'>
			<button id='toc-toggle' class='toc-toggle' aria-label='Toggle Table of Contents'>
				<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
					<line x1='3' y1='12' x2='21' y2='12' />
					<line x1='3' y1='6' x2='21' y2='6' />
					<line x1='3' y1='18' x2='21' y2='18' />
				</svg>
				<span>Table des matières</span>
			</button>

			<div id='toc-drawer' class='toc-drawer'>
				<div class='toc-header'>
					<h3>Table des matières</h3>
					<button id='toc-close' class='toc-close' aria-label='Close Table of Contents'>
						<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
							<line x1='18' y1='6' x2='6' y2='18' />
							<line x1='6' y1='6' x2='18' y2='18' />
						</svg>
					</button>
				</div>
				<nav class='toc'>
					<ul class='toc-list'>
						{headings.map((heading) => (
							<li class={`toc-item depth-${heading.depth}`}>
								<a href={`#${heading.slug}`} class='toc-link'>
									{heading.text}
								</a>
							</li>
						))}
					</ul>
				</nav>
			</div>
			<div id='toc-overlay' class='toc-overlay' />
		</div>
	)
}

<script>
	// Toggle the TOC drawer
	const tocToggle = document.getElementById("toc-toggle");
	const tocClose = document.getElementById("toc-close");
	const tocDrawer = document.getElementById("toc-drawer");
	const tocOverlay = document.getElementById("toc-overlay");

	if (tocToggle && tocClose && tocDrawer && tocOverlay) {
		const openToc = () => {
			tocDrawer.classList.add("open");
			tocOverlay.classList.add("active");
			document.body.classList.add("toc-open");
		};

		const closeToc = () => {
			tocDrawer.classList.remove("open");
			tocOverlay.classList.remove("active");
			document.body.classList.remove("toc-open");
		};

		tocToggle.addEventListener("click", openToc);
		tocClose.addEventListener("click", closeToc);
		tocOverlay.addEventListener("click", closeToc);

		// Close TOC when clicking on links
		const tocLinks = document.querySelectorAll(".toc a");
		tocLinks.forEach((link) => {
			link.addEventListener("click", () => {
				closeToc();
			});
		});

		// Close TOC when pressing escape key
		document.addEventListener("keydown", (e) => {
			if (e.key === "Escape" && tocDrawer.classList.contains("open")) {
				closeToc();
			}
		});

		// Highlight active section based on scroll position
		const observeHeaders = () => {
			const headers = Array.from(document.querySelectorAll("h2, h3, h4, h5, h6")).filter((el) => el.id);

			if (headers.length === 0) return;

			const tocLinks = document.querySelectorAll(".toc-link");

			const observerOptions = {
				rootMargin: "-80px 0px -80% 0px",
				threshold: 0,
			};

			const headersObserver = new IntersectionObserver((entries) => {
				entries.forEach((entry) => {
					const id = entry.target.getAttribute("id");
					const tocLink = document.querySelector(`.toc-link[href="#${id}"]`);

					if (tocLink) {
						if (entry.isIntersecting) {
							// Remove active class from all links
							tocLinks.forEach((link) => link.classList.remove("active"));
							// Add active class to current link
							tocLink.classList.add("active");
						}
					}
				});
			}, observerOptions);

			headers.forEach((header) => {
				headersObserver.observe(header);
			});
		};

		// Run on page load
		observeHeaders();

		// Run when content might change
		document.addEventListener("DOMContentLoaded", observeHeaders);
	}
</script>

<style>
	/* Table of Contents Container */
	.toc-container {
		position: fixed;
		left: var(--sidebar-width);
		bottom: 1.5rem;
		z-index: 99;
		transition: left 0.3s ease;
	}

	/* Toggle Button */
	.toc-toggle {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		background-color: var(--unik);
		color: white;
		border: none;
		border-radius: 4px 0 0 4px;
		padding: 0.75rem 1rem;
		cursor: pointer;
		box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
		transition: all 0.2s ease;
		transform: translateX(-100%);
	}

	.toc-toggle:hover {
		background-color: var(--primary-dark);
	}

	.toc-toggle span {
		font-weight: 500;
		font-size: 0.9rem;
	}

	/* TOC Drawer */
	.toc-drawer {
		position: fixed;
		top: 0;
		left: 0;
		width: fit-content;
		height: 100vh;
		background-color: white;
		box-shadow: 2px 0 15px rgba(0, 0, 0, 0.1);
		transform: translateX(-100%);
		transition: transform 0.3s ease;
		z-index: 101;
		overflow-y: auto;
		border-right: 1px solid var(--gray-200);
	}

	.toc-drawer.open {
		transform: translateX(0);
	}

	/* Overlay */
	.toc-overlay {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: rgba(0, 0, 0, 0.5);
		z-index: 100;
		opacity: 0;
		visibility: hidden;
		transition:
			opacity 0.3s ease,
			visibility 0.3s ease;
	}

	.toc-overlay.active {
		opacity: 1;
		visibility: visible;
	}

	/* TOC Header */
	.toc-header {
		padding: 1rem;
		display: flex;
		justify-content: space-between;
		align-items: center;
		border-bottom: 1px solid var(--gray-200);
		background-color: var(--gray-100);
	}

	.toc-header h3 {
		font-size: 1.1rem;
		color: var(--unik);
		margin: 0;
	}

	.toc-close {
		background: transparent;
		border: none;
		color: var(--gray-400);
		cursor: pointer;
		padding: 0.25rem;
		border-radius: 4px;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.toc-close:hover {
		color: var(--gray-700);
		background-color: var(--gray-200);
	}

	/* TOC Content */
	.toc {
		width: 100%;
		padding: 1rem;
	}

	.toc-list {
		list-style: none;
		padding: 0;
		margin: 0;
		border-left: 2px solid var(--gray-200);
	}

	.toc-item {
		margin-bottom: 0.75rem;
		position: relative;
	}

	.toc-item::before {
		content: "";
		position: absolute;
		width: 8px;
		height: 2px;
		background-color: var(--gray-200);
		left: -8px;
		top: 50%;
		transform: translateY(-50%);
	}

	.toc-item.depth-1 {
		font-weight: 600;
		margin-left: 0;
	}

	.toc-item.depth-1::before {
		width: 0;
	}

	.toc-item.depth-2 {
		padding-left: 1rem;
		margin-left: 0.5rem;
	}

	.toc-item.depth-3 {
		padding-left: 1.5rem;
		margin-left: 1rem;
		font-size: 0.9em;
	}

	.toc-item.depth-3::before {
		width: 16px;
		height: 2px;
		background-color: var(--gray-200);
		left: -16px;
		top: 50%;
		transform: translateY(-50%);
	}

	.toc-link {
		display: block;
		padding: 0.5rem 0.75rem;
		border-radius: 4px;
		text-decoration: none;
		color: var(--gray-700);
		transition: all 0.15s ease;
		border-left: 2px solid transparent;
		margin-left: -2px;
	}

	.toc-link:hover {
		background-color: var(--gray-100);
		color: var(--primary-dark);
		border-left-color: var(--primary);
	}

	.toc-link.active {
		background-color: var(--gray-100);
		color: var(--primary);
		border-left-color: var(--primary);
		font-weight: 500;
	}

	/* Mobile Responsive */
	@media (max-width: 768px) {
		.toc-container {
			left: 0;
			bottom: 1rem;
		}

		.toc-toggle {
			transform: translateX(0);
			border-radius: 0 4px 4px 0;
			padding: 0.5rem 0.75rem;
		}
	}
</style>
