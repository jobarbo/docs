---
import {getCollection} from "astro:content";
import type {CollectionEntry} from "astro:content";
import BaseLayout from "./BaseLayout.astro";
import Navigation from "../components/Navigation.astro";

interface Props {
	title: string;
	description?: string;
	currentPath: string;
	headings?: {
		depth: number;
		slug: string;
		text: string;
	}[];
}

const {title, description, currentPath, headings = []} = Astro.props;

// Get all the documentation pages sorted by order
const allDocs = await getCollection("docs");
const stylesDocs = allDocs
	.filter((doc: CollectionEntry<"docs">) => doc.data.section === "styles")
	.sort((a: CollectionEntry<"docs">, b: CollectionEntry<"docs">) => (a.data.order || 999) - (b.data.order || 999));

// Debug
console.log("DocsLayout currentPath:", currentPath);
---

<BaseLayout title={title} description={description}>
	<div slot='sidebar'>
		<Navigation docs={stylesDocs} currentPath={currentPath} headings={headings} />
	</div>

	<article class='article'>
		<slot />
	</article>
</BaseLayout>

<script>
	// Handle smooth scrolling for all in-page anchor links
	document.addEventListener("DOMContentLoaded", () => {
		// Select all links that point to an ID on the same page
		const inPageLinks = document.querySelectorAll('a[href^="#"]:not(.toc-link)');

		inPageLinks.forEach((link) => {
			link.addEventListener("click", (e) => {
				// Get the target ID from the href
				const href = link.getAttribute("href");
				if (href && href !== "#") {
					e.preventDefault();

					const targetId = href.substring(1);
					const targetElement = document.getElementById(targetId);

					if (targetElement) {
						// Scroll to the element with smooth behavior
						targetElement.scrollIntoView({
							behavior: "smooth",
							block: "start",
						});

						// Update URL hash without jumping
						window.history.pushState({}, "", href);
					}
				}
			});
		});

		// Make inline code tags copyable
		const inlineCodeTags = Array.from(document.querySelectorAll("code")).filter((codeEl) => !codeEl.parentElement || codeEl.parentElement.tagName !== "PRE");

		inlineCodeTags.forEach((codeEl) => {
			// Wrap code element in a span for positioning
			const wrapper = document.createElement("span");
			wrapper.className = "code-wrapper";
			codeEl.parentNode?.insertBefore(wrapper, codeEl);
			wrapper.appendChild(codeEl);

			// Add copy button
			const copyBtn = document.createElement("button");
			copyBtn.className = "copy-btn";
			copyBtn.innerHTML =
				'<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>';
			copyBtn.title = "Copier";
			wrapper.appendChild(copyBtn);

			// Add click event to copy button
			copyBtn.addEventListener("click", (e) => {
				e.stopPropagation(); // Prevent event bubbling
				const text = codeEl.textContent || "";

				// Handle clipboard API
				const copyText = () => {
					// Show success feedback
					copyBtn.classList.add("copied");
					copyBtn.innerHTML =
						'<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>';

					// Reset after 1.5 seconds
					setTimeout(() => {
						copyBtn.classList.remove("copied");
						copyBtn.innerHTML =
							'<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>';
					}, 1500);
				};

				// Try to use the modern clipboard API
				if (navigator.clipboard) {
					navigator.clipboard
						.writeText(text)
						.then(copyText)
						.catch((err) => {
							console.error("Clipboard write failed: ", err);
							fallbackCopy(text);
						});
				} else {
					fallbackCopy(text);
				}

				// Fallback for older browsers
				function fallbackCopy(text: string) {
					const textArea = document.createElement("textarea");
					textArea.value = text;
					textArea.style.position = "fixed";
					textArea.style.opacity = "0";
					document.body.appendChild(textArea);
					textArea.focus();
					textArea.select();

					try {
						const successful = document.execCommand("copy");
						if (successful) {
							copyText();
						} else {
							console.error("Fallback: Copy command was unsuccessful");
						}
					} catch (err) {
						console.error("Fallback: Could not copy text: ", err);
					}

					document.body.removeChild(textArea);
				}
			});
		});
	});
</script>

<style>
	article {
		width: 100%;
		max-width: 1920px;
		margin: 0 auto;
	}

	.article {
		margin-bottom: 4rem;
	}

	.article :global(h1) {
		font-size: 2.5rem;
		margin-bottom: 1rem;
		color: var(--unik);
	}

	.article :global(h2) {
		font-size: 1.75rem;
		margin: 2rem 0 1rem;
		padding-bottom: 0.5rem;
		border-bottom: 1px solid var(--gray-200);
	}

	.article :global(h3) {
		font-size: 1.25rem;
		margin: 1.5rem 0 0.75rem;
	}

	.article :global(p) {
		margin-bottom: 1rem;
	}

	.article :global(ul),
	.article :global(ol) {
		margin-bottom: 1rem;
		padding-left: 1.5rem;
	}

	.article :global(li) {
		margin-bottom: 0.5rem;
	}

	.article :global(code) {
		font-family: Courier, monospace;
		background-color: var(--blue-100);
		font-weight: 500;
		color: var(--gray-900);
		padding: 0.2rem 0.4rem;
		border-radius: 0.25rem;
		font-size: 0.9em;
		border: 1px solid var(--blue-200);
	}

	.article :global(.code-wrapper) {
		position: relative;
		display: inline-flex;
		align-items: center;
	}

	.article :global(.copy-btn) {
		position: absolute;
		right: -16px;
		top: -16px;
		width: 28px;
		height: 28px;
		display: flex;
		align-items: center;
		justify-content: center;
		background-color: var(--primary-dark);
		color: white;
		border-radius: 50%;
		border: none;
		padding: 0;
		opacity: 0;
		transition:
			opacity 0.2s ease,
			transform 0.2s ease;
		transform: scale(0.8);
		cursor: pointer;
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
	}

	.article :global(.copy-btn.copied) {
		background-color: #10b981; /* Green for success */
	}

	.article :global(.code-wrapper:hover .copy-btn) {
		opacity: 1;
		transform: scale(1);
	}

	.article :global(.code-wrapper:hover code) {
		background-color: var(--blue-200);
	}

	.article :global(pre) {
		background-color: var(--dark);
		color: var(--light);
		padding: 1rem;
		border-radius: 0.5rem;
		overflow: auto;
		margin: 1rem 0;
	}

	.article :global(.github-dark code) {
		border: 0px;
	}

	.article :global(pre code) {
		background-color: transparent;
		padding: 0;
		color: inherit;
	}

	.article :global(a) {
		color: var(--primary-dark);
		text-decoration: none;
	}

	.article :global(a:hover) {
		text-decoration: underline;
	}

	.article :global(blockquote) {
		border-left: 4px solid var(--primary);
		padding-left: 1rem;
		color: var(--secondary);
		margin: 1rem 0;
	}

	.article :global(hr) {
		border: none;
		border-top: 1px solid var(--gray-200);
		margin: 2rem 0;
	}

	.article :global(table) {
		width: 100%;
		border-collapse: collapse;
		margin: 1rem 0;
	}

	.article :global(th),
	.article :global(td) {
		padding: 0.5rem;
		border: 1px solid var(--gray-300);
	}

	.article :global(th) {
		background-color: var(--gray-100);
		font-weight: 600;
		text-align: left;
	}
</style>
