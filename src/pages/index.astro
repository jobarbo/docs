---
import {getCollection} from "astro:content";
import type {CollectionEntry} from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";
import Navigation from "../components/Navigation.astro";
import NavSection from "../components/NavSection.astro";

// Get all docs
const allDocs = await getCollection("docs");
const stylesDocs = allDocs
	.filter((doc: CollectionEntry<"docs">) => doc.data.section === "styles")
	.sort((a: CollectionEntry<"docs">, b: CollectionEntry<"docs">) => (a.data.order || 999) - (b.data.order || 999));

// Get the first document to use for links
const firstDoc = stylesDocs.length > 0 ? stylesDocs[0] : null;
const docsBaseUrl = firstDoc ? `/docs/${firstDoc.slug}` : "/docs/index";

// Feature sections
const featureSections = [
	{
		title: "Styles",
		description: "Notre framework SCSS offre un système complet pour créer des interfaces cohérentes et responsives.",
		items: [
			{
				title: "Documentation des styles",
				path: docsBaseUrl,
				isDisabled: false,
			},
		],
	},
	{
		title: "JavaScript (à venir)",
		description: "Documentation pour nos utilitaires et composants JavaScript.",
		items: [
			{
				title: "Documentation JavaScript",
				path: "#",
				isDisabled: true,
			},
		],
	},
	{
		title: "Composants (à venir)",
		description: "Bibliothèque de composants réutilisables pour accélérer le développement.",
		items: [
			{
				title: "Documentation des composants",
				path: "#",
				isDisabled: true,
			},
		],
	},
];
---

<BaseLayout title='Unik - Documentation'>
	<Navigation slot='sidebar' docs={stylesDocs} currentPath='/' />

	<div class='hero'>
		<h1>Documentation Unik (Développement Web)</h1>
		<p class='subtitle'>Documentation complète pour notre framework de développement</p>
	</div>

	<div class='features'>
		{
			featureSections.map((section) => (
				<div class='feature-card'>
					<h2>{section.title}</h2>
					<p>{section.description}</p>
					<div class='feature-links'>
						{section.items.map((item) => (
							<a href={item.isDisabled ? "#" : item.path} class={`feature-link ${item.isDisabled ? "disabled" : ""}`}>
								{item.title}
							</a>
						))}
					</div>
				</div>
			))
		}
	</div>
</BaseLayout>

<style>
	.hero {
		padding: 4rem 0;
		text-align: center;
		max-width: 1920px;
	}

	h1 {
		font-size: 3rem;
		margin-bottom: 1rem;
		color: var(--primary);
	}

	.subtitle {
		font-size: 1.25rem;
		color: var(--secondary);
		margin-bottom: 2rem;
	}

	.features {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: 2rem;
		margin: 2rem auto 4rem;
		max-width: 1920px;
	}

	.feature-card {
		background-color: var(--gray-100);
		border-radius: 0.5rem;
		padding: 1.5rem;
		border: 1px solid var(--gray-200);
		transition:
			transform 0.2s ease,
			box-shadow 0.2s ease;
	}

	.feature-card:hover {
		transform: translateY(-5px);
		box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
	}

	.feature-card h2 {
		font-size: 1.5rem;
		margin-bottom: 1rem;
		color: var(--dark);
	}

	.feature-card p {
		color: var(--secondary);
		margin-bottom: 1.5rem;
	}

	.feature-links {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	.feature-link {
		color: var(--primary);
		text-decoration: none;
		font-weight: 500;
		display: inline-flex;
		align-items: center;
	}

	.feature-link:hover {
		text-decoration: underline;
	}

	.feature-link.disabled {
		opacity: 0.5;
		cursor: not-allowed;
		pointer-events: none;
	}

	@media (max-width: 768px) {
		.hero {
			padding: 2rem 0;
		}

		h1 {
			font-size: 2rem;
		}

		.features {
			grid-template-columns: 1fr;
		}
	}
</style>
